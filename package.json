{
  "dependencies": {
    "@angular/common": "12.2.16",
    "@angular/compiler": "12.2.16",
    "@angular/core": "12.2.16",
    "@angular/forms": "12.2.16",
    "@angular/platform-browser": "12.2.16",
    "@angular/platform-browser-dynamic": "12.2.16",
    "@devextreme/runtime": "3.0.7",
    "core-js": "2.4.1",
    "devexpress-diagram": "2.1.57",
    "devexpress-gantt": "4.1.30",
    "devextreme": "22.1.3",
    "devextreme-angular": "22.1.3",
    "devextreme-quill": "1.5.16",
    "es6-object-assign": "1.1.0",
    "inferno": "7.4.4",
    "inferno-clone-vnode": "7.4.11",
    "inferno-compat": "7.4.11",
    "inferno-create-class": "7.4.11",
    "inferno-create-element": "7.4.11",
    "inferno-dom": "latest",
    "inferno-extras": "7.4.11",
    "inferno-hydrate": "7.4.11",
    "jszip": "3.7.1",
    "luxon": "1.28.0",
    "rrule": "2.6.4",
    "rxjs": "7.5.3",
    "tslib": "2.3.1",
    "zone.js": "0.10.3"
  },
  "description": "This demo shows how to implement remote CRUD operations in the CustomStore. You can view the server implementation under the DataGridWebApiController tab in the ASP.NET MVC version of this demo. The requests sent to the server are displayed under the DataGrid.\nAfter a cell is edited, the DataGrid can behave differently depending on the selected refresh mode: reload data from the server (the refreshMode is full), reapply data processing operations (reshape), or merely rerender the changed cells (repaint).\n",
  "main": "src/app/app.component.ts",
  "name": "CRUD Operations - DevExtreme Data Grid"
}